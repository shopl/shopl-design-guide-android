name: Maven Central REST 배포

on:
  push:
    branches:
      - document/scott/SH-11796-deploy-automation

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 1. secrets에서 secring.gpg 복원 & gradle.properties 세팅
      - name: Restore secring.gpg
        run: echo "${{ secrets.SIGNING_SECRET_KEY_RING_FILE }}" | base64 --decode > ./secring.gpg

      - name: Create gradle.properties with secrets
        run: |
          echo "mavenCentralUsername=${{ secrets.MAVEN_CENTRAL_USER_NAME }}" >> ./gradle.properties
          echo "mavenCentralPassword=${{ secrets.MAVEN_CENTRAL_PASSWORD }}" >> ./gradle.properties
          echo "signing.keyId=${{ secrets.SIGNING_KEY_ID }}" >> ./gradle.properties
          echo "signing.password=${{ secrets.SIGNING_PASSWORD }}" >> ./gradle.properties
          echo "signing.secretKeyRingFile=$(pwd)/secring.gpg" >> ./gradle.properties

      # 2. 버전 & group 추출 (PublishingConfig와 build.gradle에서 추출)
      - name: Extract group and version
        id: extract_info
        run: |
          GROUP=$(grep -m1 'GROUP' build-logic/src/main/kotlin/com/shopl/sdg/build_logic/PublishingConfig.kt | sed 's/.*"\(.*\)".*/\1/')
          VERSION=$(grep -m1 'VERSION' build-logic/src/main/kotlin/com/shopl/sdg/build_logic/PublishingConfig.kt | sed 's/.*"\(.*\)".*/\1/')
          ARTIFACT_ID=$(grep -m1 'SDG_ARTIFACT_ID' build-logic/src/main/kotlin/com/shopl/sdg/build_logic/PublishingConfig.kt | sed 's/.*"\(.*\)".*/\1/')
          
          echo "group=$GROUP" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "artifactId=$ARTIFACT_ID" >> $GITHUB_OUTPUT

      # 3. 산출물 생성 (sources/javadoc/서명 포함)
      - name: Build project and publish to maven local
        run: ./gradlew clean build publishToMavenLocal

      # 4. zip 파일 생성 (pom 확장자, 모든 파일 zip 루트에)
      - name: Package artifacts for Maven Central REST API
        id: make_zip
        run: |
          GROUP="${{ steps.extract_info.outputs.group }}"
          VERSION="${{ steps.extract_info.outputs.version }}"
          ARTIFACT_ID="${{ steps.extract_info.outputs.artifactId }}"
          ARTIFACT_DIR="bundle/${GROUP}/${ARTIFACT_ID}/${VERSION}"
          ZIP_NAME="${GROUP}-${ARTIFACT_ID}-${VERSION}.zip"
          mkdir -p "$ARTIFACT_DIR"
          
          # 이름도 반드시 artifactId-version.확장자로 바꿔서 복사!
          cp sdg/build/publications/maven/pom-default.xml "$ARTIFACT_DIR/${ARTIFACT_ID}-${VERSION}.pom"
          cp sdg/build/publications/maven/pom-default.xml.asc "$ARTIFACT_DIR/${ARTIFACT_ID}-${VERSION}.pom.asc"
          cp sdg/build/outputs/aar/sdg-release.aar "$ARTIFACT_DIR/${ARTIFACT_ID}-${VERSION}.aar"
          cp sdg/build/outputs/aar/sdg-release.aar.asc "$ARTIFACT_DIR/${ARTIFACT_ID}-${VERSION}.aar.asc"
          
          cd bundle
          zip -r "../$ZIP_NAME" .
          cd ..
          echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT

      # 5. REST API로 업로드(실패 시 즉시 중단)
      - name: Upload artifact to Sonatype Central
        id: publish_upload
        run: |
          ZIP_NAME="${{ steps.make_zip.outputs.zip_name }}"
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://central.sonatype.com/api/v1/publisher/upload?publishingType=AUTOMATIC" \
            -H "Authorization: Bearer ${{ secrets.SONATYPE_PUBLISH_TOKEN }}" \
            -F bundle=@$ZIP_NAME)
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          DEPLOYMENT_ID=$(echo "$RESPONSE" | head -n-1 | tr -d '\r\n')
          echo "HTTP_CODE: $HTTP_CODE"
          echo "DEPLOYMENT_ID: $DEPLOYMENT_ID"
          if [[ "$HTTP_CODE" != 2* ]]; then
            echo "::error::Upload failed with HTTP status $HTTP_CODE"
            exit 1
          fi
          if [[ ! "$DEPLOYMENT_ID" =~ ^[a-f0-9-]{36}$ ]]; then
            echo "::error::No valid deployment id returned"
            exit 1
          fi
          echo "publish_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

      # 6. 업로드 성공 시 Polling (업로드 실패면 실행X)
      - name: Poll publish status
        id: poll_status
        if: success()
        run: |
          PUBLISH_ID="${{ steps.publish_upload.outputs.publish_id }}"
          for i in {1..20}; do
            sleep 30
            RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://central.sonatype.com/api/v1/publisher/status?id=$PUBLISH_ID" \
              -H "Authorization: Bearer ${{ secrets.SONATYPE_PUBLISH_TOKEN }}")
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | head -n-1)
          
            echo "==== Raw BODY ===="
            echo "$BODY"
            echo "==== HTTP_CODE ===="
            echo "$HTTP_CODE"
          
          if [[ "$HTTP_CODE" != 2* ]]; then
            echo "::error::Status API returned non-2xx HTTP status: $HTTP_CODE"
            exit 1
          fi
          
          if [[ "$BODY" != \{* ]]; then
            echo "::error::Status API did not return JSON. Response: $BODY"
            exit 1
          fi
          
          DEPLOYMENT_STATE=$(echo "$BODY" | jq -r .deploymentState)
          ERRORS=$(echo "$BODY" | jq -c .errors)
          echo "Current deploymentState: $DEPLOYMENT_STATE"
          
            if [[ "$DEPLOYMENT_STATE" == "SUCCESS" ]]; then
              echo "Successfully published!"
              exit 0
            elif [[ "$DEPLOYMENT_STATE" == "FAILED" ]]; then
              echo "Publish failed!"
              echo "details=$ERRORS" >> $GITHUB_OUTPUT
              exit 1
            fi
            echo "Still processing. Retrying..."
          done
          echo "Timeout: Not published after 10 minutes."
          exit 1
      

      # 7. Slack 알림 (성공)
      - name: Slack Notify Publish Success
        if: ${{ steps.poll_status.conclusion == 'success' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_TITLE: "SDG Maven 등재"
          SLACK_MESSAGE: |
            :star: *[Maven Central 등재 완료]*  
            `${{ github.ref }}`  
            커밋: `${{ github.sha }}`  
            실행자: `${{ github.actor }}`
          SLACK_COLOR: '#00c6ad'

      # 8. Slack 알림 (실패)
      - name: Slack Notify Publish Failure
        if: ${{ steps.poll_status.conclusion == 'failure' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_TITLE: "SDG Maven 등재 실패"
          SLACK_MESSAGE: |
            :warning: *[Maven Central 등재 실패]*  
            `${{ github.ref }}`  
            커밋: `${{ github.sha }}`  
            실행자: `${{ github.actor }}`  
            상세: `${{ steps.poll_status.outputs.details }}`
          SLACK_COLOR: '#ffa726'
